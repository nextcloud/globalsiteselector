<?php

declare(strict_types=1);

/**
 * SPDX-FileCopyrightText: 2021 Nextcloud GmbH and Nextcloud contributors
 * SPDX-License-Identifier: AGPL-3.0-or-later
 */

namespace {
	use OCP\IServerContainer;

	class OC {
		static $CLI = false;
		/** @var IServerContainer */
		static $server;
	}
}

namespace OC\Core\Command {
	use Symfony\Component\Console\Input\InputInterface;
	use Symfony\Component\Console\Output\OutputInterface;
	class Base {
		public const OUTPUT_FORMAT_PLAIN = 'plain';
		public const OUTPUT_FORMAT_JSON = 'json';
		public const OUTPUT_FORMAT_JSON_PRETTY = 'json_pretty';

		public function __construct() {}
		protected function configure() {}
		public function run(InputInterface $input, OutputInterface $output) {}
		public function setName(string $name) {}
		public function getHelper(string $name) {}
		protected function writeArrayInOutputFormat(InputInterface $input, OutputInterface $output, $items, $prefix = '  - ') {
		}
	}
}

namespace Symfony\Component\Console\Helper {
	use Symfony\Component\Console\Output\OutputInterface;
	class Table {
		public function __construct(OutputInterface $text) {}
		public function setHeaders(array $header) {}
		public function setRows(array $rows) {}
		public function render() {}
		public function appendRow(array $row) {}
	}
}

namespace Symfony\Component\Console\Input {
	class InputInterface {
		public function getOption(string $key) {}
		public function getArgument(string $key) {}
	}
	class InputArgument {
		const REQUIRED = 0;
		const OPTIONAL = 1;
		const IS_ARRAY = 1;
	}
	class InputOption {
		const VALUE_NONE = 1;
		const VALUE_REQUIRED = 1;
		const VALUE_OPTIONAL = 1;
	}
}

namespace Symfony\Component\Console\Question {
	class ConfirmationQuestion {
		public function __construct(string $text, bool $default, string $accept = 'y') {}
	}
}

namespace Symfony\Component\Console\Output {
	class OutputInterface {
		public const VERBOSITY_VERBOSE = 1;
		public function writeln(string $text, int $flat = 0) {}
		public function write(string $text, int $flat = 0) {}
	}
}

namespace OC\DB {
    use OCP\IDBConnection;
    class ConnectionAdapter {}

    class SchemaWrapper {
        public function __construct(IDBConnection $connection) {}

        public function performDropTableCalls();
    }
}

namespace Doctrine\DBAL\Query {
    class QueryBuilder {
        public const SELECT = 'select';
    }
}

namespace OC\User {
	use OCP\UserInterface;
	use OCP\IUser;
	use Symfony\Component\EventDispatcher\EventDispatcherInterface;
	class User implements IUser {
		public function __construct(string $uid, ?UserInterface $backend, EventDispatcherInterface $dispatcher, $emitter = null, IConfig $config = null, $urlGenerator = null) {}
	}
}

namespace OC\BackgroundJob {
	use OCP\BackgroundJob\IJob;
	use OCP\BackgroundJob\IJobList;
	use OCP\ILogger;

	abstract class TimedJob implements IJob {
		public function execute(IJobList $jobList, ILogger $logger = null) {
		}

		abstract protected function run($argument);

		public function setId(int $id) {
		}

		public function setLastRun(int $lastRun) {
		}

		public function setArgument($argument) {
		}

		public function getId() {
		}

		public function getLastRun() {
		}

		public function getArgument() {
		}
	}
}

namespace OC\Hooks {

	/**
	 * Class Emitter
	 *
	 * interface for all classes that are able to emit events
	 *
	 * @package OC\Hooks
	 * @deprecated 18.0.0 use events and the \OCP\EventDispatcher\IEventDispatcher service
	 */
	interface Emitter {
		/**
		 * @param string $scope
		 * @param string $method
		 * @param callable $callback
		 * @return void
		 * @deprecated 18.0.0 use \OCP\EventDispatcher\IEventDispatcher::addListener
		 */
		public function listen($scope, $method, callable $callback) {
		}

		/**
		 * @param string $scope optional
		 * @param string $method optional
		 * @param callable $callback optional
		 * @return void
		 * @deprecated 18.0.0 use \OCP\EventDispatcher\IEventDispatcher::removeListener
		 */
		public function removeListener($scope = null, $method = null, ?callable $callback = null) {
		}
}
